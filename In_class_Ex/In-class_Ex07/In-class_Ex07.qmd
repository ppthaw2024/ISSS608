---
title: "In-class_Ex07: Visualising, Analysing and Forecasting Time-series Data: tidyverts methods"
format: html
date-modified: "last-modified"
execute:
  echo: true
  eva: true
  warning: false
  freeze: true
---

## **7.2 Getting Started**

```{r}
pacman::p_load(tidyverse, tsibble, feasts, fable, seasonal)
```

### **7.2.1 Importing the data**

```{r}
ts_data <- read_csv(
  "visitor_arrivals_by_air.csv")
```

```{r}
ts_data$`Month-Year` <- dmy(
  ts_data$`Month-Year`)
```

```{r}
ts_data
```

### **7.2.3 Conventional base `ts` object versus `tibble` object**

```{r}
ts_data_ts <- ts(ts_data)       
head(ts_data_ts)
```

### **7.2.4 Converting `tibble` object to `tsibble` object**

```{r}
ts_tsibble <- ts_data %>%
  mutate(Month = yearmonth(`Month-Year`)) %>%
  as_tsibble(index = `Month`)
```

## **7.3 Visualising Time-series Data**

```{r}
ts_longer <- ts_data %>%
  pivot_longer(cols = c(2:34),
               names_to = "Country",
               values_to = "Arrivals")
```

### **7.3.1 Visualising single time-series: ggplot2 methods**

```{r}
ts_longer %>%
  filter(Country == "Vietnam") %>%
  ggplot(aes(x = `Month-Year`, 
             y = Arrivals))+
  geom_line(size = 0.5)
```

```{r}
ts_longer %>%
  filter(Country == "Malaysia") %>%
  ggplot(aes(x = `Month-Year`, 
             y = Arrivals))+
  geom_line(size = 0.5)
```

```{r}
ts_longer %>%
  filter(Country == "Myanmar") %>%
  ggplot(aes(x = `Month-Year`, 
             y = Arrivals))+
  geom_line(size = 0.5)
```

### **9.3.2 Plotting multiple time-series data with ggplot2 methods**

very hard to see

```{r}
ggplot(data = ts_longer, 
       aes(x = `Month-Year`, 
           y = Arrivals,
           color = Country))+
  geom_line(size = 0.5) +
  theme(legend.position = "bottom", 
        legend.box.spacing = unit(0.5, "cm"))
```

In order to provide effective comparison, [`facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) of **ggplot2** package is used to create small multiple line graph also known as trellis plot.

```{r}
#| echo: false
#| fig-height: 12
ggplot(data = ts_longer, 
       aes(x = `Month-Year`, 
           y = Arrivals))+
  geom_line(size = 0.5) +
  facet_wrap(~ Country,
             ncol = 3,  #after defining 3 coloumn, next one will go down to row
             scales = "free_y") +
  theme_bw()
```

### **7.4.2 Visual Analysis of Seasonality with Cycle Plot**

In the code chunk below, cycle plots using [`gg_subseries()`](https://feasts.tidyverts.org/reference/gg_subseries.html) of feasts package are created. Notice that the cycle plots show not only seasonal patterns but also trend.

```{r}
tsibble_longer <- ts_tsibble %>%
  pivot_longer(cols = c(2:34),
               names_to = "Country",
               values_to = "Arrivals")
```

```{r}
#| fig-height: 6
tsibble_longer %>%
  filter(Country == "Vietnam" |
         Country == "Italy") %>% 
  gg_subseries(Arrivals)
```

## **7.5 Time series decomposition**

Time series decomposition allows us to isolate structural components such as trend and seasonality from the time-series data.

![](images/clipboard-2176589403.png){width="377"}

### **7.5.1 Single time series decomposition**

```{r}
tsibble_longer %>%
  filter(`Country` == "Vietnam") %>%
  ACF(Arrivals) %>% 
  autoplot()
```

### **7.5.2 Multiple time-series decomposition**

```{r}
tsibble_longer %>%
  filter(`Country` == "Vietnam" |
         `Country` == "Italy" |
         `Country` == "United Kingdom" |
         `Country` == "China") %>%
  ACF(Arrivals) %>%
  autoplot()
```

## **7.7 Visual Forecasting**

### **7.7.1 Time Series Data Sampling**

First, an extra column called *Type* indicating training or hold-out will be created by using `mutate()` of **dplyr** package. It will be extremely useful for subsequent data visualisation.

```{r}
vietnam_ts <- tsibble_longer %>%
  filter(Country == "Vietnam") %>% 
  mutate(Type = if_else(
    `Month-Year` >= "2019-01-01", 
    "Hold-out", "Training"))
```

```{r}
vietnam_train <- vietnam_ts %>%
  filter(`Month-Year` < "2019-01-01")
```

### **7.7.2 Exploratory Data Analysis (EDA): Time Series Data**

```{r}
vietnam_train %>%
  model(stl = STL(Arrivals)) %>%
  components() %>%
  autoplot()
```

### **7.7.8 Step 5: Forecasting future values**

```{r}
fit_ETS <- vietnam_train %>%
  model(`SES` = ETS(Arrivals ~ error("A") + 
                      trend("N") + 
                      season("N")),
        `Holt`= ETS(Arrivals ~ error("A") +
                      trend("A") +
                      season("N")),
        `damped Holt` = 
          ETS(Arrivals ~ error("A") +
                trend("Ad") + 
                season("N")),
        `WH_A` = ETS(
          Arrivals ~ error("A") + 
            trend("A") + 
            season("A")),
        `WH_M` = ETS(Arrivals ~ error("M") 
                         + trend("A") 
                         + season("M"))
  )
```

```{r}
fit_ETS %>%
  tidy()
```

```{r}
fit_ETS %>%
  report()
```

```{r}
fit_ETS %>%
  forecast(h = "12 months") %>%
  autoplot(vietnam_ts, 
           level = NULL)
```

### **7.7.9 Fitting ETS Automatically**

```{r}
fit_autoETS <- vietnam_train %>%
  model(ETS(Arrivals))
fit_autoETS %>% report()
```

### **7.7.10 Fitting Fitting ETS Automatically**

```{r}
gg_tsresiduals(fit_autoETS)
```
